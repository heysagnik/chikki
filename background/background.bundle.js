const u={BASE_URL:"http://localhost:3000",ENDPOINT:"/api/generate",API_KEY:"your-secure-api-key-here",TIMEOUT_MS:1e4,MAX_RETRIES:2};async function k(r,o=null){if(!r||typeof r!="string"||r.trim()==="")throw new Error("Prompt cannot be empty");const t=crypto.randomUUID(),e={prompt:r,...o&&{generationConfig:o}};let a=0;for(;a<=u.MAX_RETRIES;)try{const s=new AbortController,i=setTimeout(()=>s.abort(),u.TIMEOUT_MS),l={"Content-Type":"application/json","X-API-Key":u.API_KEY,"X-Request-ID":t};o!=null&&o.authToken&&(l.Authorization=`Bearer ${o.authToken}`);const c=await fetch(`${u.BASE_URL}${u.ENDPOINT}`,{method:"POST",headers:l,body:JSON.stringify(e),signal:s.signal});if(clearTimeout(i),c.status===401||c.status===403)throw new Error("Unauthorized: Please log in again");if(c.status===429)throw new Error("Rate limit exceeded. Please try again later.");const n=await c.json();if(!c.ok)throw new Error((n==null?void 0:n.error)||`API Error (${c.status}): ${c.statusText}`);if(!n.success||typeof n.data!="string")throw new Error("Invalid response format");return n.data}catch(s){if(s.name==="AbortError")throw new Error("Request timed out");if(s.message.includes("fetch")&&a<u.MAX_RETRIES){a++,await new Promise(i=>setTimeout(i,1e3*a));continue}throw console.error(`Request ${t} failed:`,s),s}}const S="your-secure-api-key-here",w="http://localhost:3000",h=w;console.log(`Using API key: Exists and API URL: ${h}`);const y="/api/auth/login",p="/api/auth/register",v="/api/auth/me",E="/";async function g(r,o){var t,e;try{console.log(`[ServiceWorker] Auth request to ${r}:`,o);const s=await fetch(`${h}${r}`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":"your-secure-api-key-here"},body:JSON.stringify(o)}),i=await s.json();if(console.log(`[ServiceWorker] Raw backend response for ${r}:`,i),!s.ok)return console.error(`[ServiceWorker] Backend request failed for ${r}: Status ${s.status}`,i),{success:!1,error:i.message||`Request failed with status ${s.status}`};const l=(t=i.data)==null?void 0:t.token,c=(e=i.data)==null?void 0:e.user;if(console.log(`[ServiceWorker] Extracted token: ${l?"Exists":"MISSING"}, Extracted user: ${c?"Exists":"MISSING"}`),!l||!c)return console.error(`[ServiceWorker] Backend response for ${r} is missing token or user under 'data'. Response:`,JSON.stringify(i)),{success:!1,error:"Backend response missing token or user data."};const n={authToken:l,user:c};console.log(`[ServiceWorker] Attempting to save to storage for ${r}:`,JSON.stringify(n));try{await chrome.storage.local.set(n),console.log(`[ServiceWorker] Successfully saved auth data to storage for ${r}.`);const f=await chrome.storage.local.get(["authToken","user"]);console.log("[ServiceWorker] Verification read after save:",JSON.stringify(f))}catch(f){return console.error(`[ServiceWorker] Failed to save auth data to storage for ${r}:`,f),{success:!1,error:"Failed to save session data."}}const d={success:!0,token:l,user:c};return console.log(`[ServiceWorker] Sending result back to popup for ${r}:`,JSON.stringify(d)),d}catch(a){return console.error(`[ServiceWorker] Auth request to ${r} failed:`,a),{success:!1,error:a.message||"Network error occurred"}}}async function I(){console.log("[ServiceWorker] Fetching API health...");try{const r=await fetch(`${h}${E}`),o=await r.json();if(!r.ok||!o.status)throw new Error(o.message||`Health check failed (${r.status})`);const t=o.status.toLowerCase();let e="warning";return t==="ready to assist"||t.includes("operational")?e="online":t.includes("degrad")||t.includes("maintenance")?e="warning":e="offline",console.log("[ServiceWorker] API Health status:",e),{success:!0,health:e}}catch(r){return console.error("[ServiceWorker] Health check error:",r),{success:!1,health:"offline",error:r.message}}}async function m(){var r;console.log("[ServiceWorker] Fetching user profile...");try{const t=(await chrome.storage.local.get("authToken")).authToken;if(!t)return console.log("[ServiceWorker] No auth token found for profile fetch."),{success:!1,error:"Not authenticated",requiresLogout:!0};const e=await fetch(`${h}${v}`,{method:"GET",headers:{Authorization:`Bearer ${t}`,"X-API-Key":S,Accept:"application/json"}}),a=await e.json();if(console.log("[ServiceWorker] Raw profile response:",a),!e.ok){if(console.error("[ServiceWorker] Profile fetch failed:",e.status,a),e.status===401||e.status===403)return await chrome.storage.local.remove(["authToken","user"]),console.log("[ServiceWorker] Cleared invalid token due to 401/403."),{success:!1,error:"Session expired or invalid",requiresLogout:!0};throw new Error(a.message||`Failed to fetch profile (${e.status})`)}const s=(r=a.data)==null?void 0:r.user;return s?(await chrome.storage.local.set({user:s}),console.log("[ServiceWorker] Successfully fetched and updated user profile in storage."),{success:!0,user:s}):(console.error('[ServiceWorker] Profile response missing user data under "data.user". Response:',JSON.stringify(a)),{success:!1,error:"Invalid profile data received",requiresLogout:!1})}catch(o){return console.error("[ServiceWorker] Profile fetch error:",o),{success:!1,error:o.message||"Failed to fetch profile",requiresLogout:!1}}}chrome.runtime.onMessage.addListener((r,o,t)=>{switch(console.log("[ServiceWorker] Received message:",r.action||r.type,r.data||""),r.action||r.type){case"generate":return k(r.prompt).then(e=>t({data:e})).catch(e=>t({error:e.message})),!0;case"login":return g(y,r.data).then(e=>t(e)).catch(e=>t({success:!1,error:e.message})),!0;case"register":return g(p,r.data).then(e=>t(e)).catch(e=>t({success:!1,error:e.message})),!0;case"getHealth":return I().then(e=>t(e)).catch(e=>t({success:!1,health:"offline",error:e.message})),!0;case"getProfile":return m().then(e=>t(e)).catch(e=>t({success:!1,error:e.message,requiresLogout:!1})),!0;default:return console.warn("[ServiceWorker] Unknown message action:",r.action||r.type),!1}});console.log("Chikki service worker initialized/updated");
